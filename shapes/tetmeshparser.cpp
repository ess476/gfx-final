#include "tetmeshparser.h"
#include <fstream>
#include <string>
#include <iostream>
#include <sstream>
#include <sys/time.h>
#include <functional>
#include "timing.h"

namespace {
tetgenbehavior _;
bool success = _.parse_commandline("p");
int numTimesParsed = 0;

const tetgenbehavior tet_behavior = _;

bool strIsIntable(const std::string& str) {
    if(str.length() == 0)
        return false;
    if(str[0] == '-' || str[0] == '+') {
        return strIsIntable(str.substr(1));
    }
    return str.find_first_not_of("0123456789") == std::string::npos; // i.e. no non-digits
}

int getFirstIntFromVTN(const std::string& vtn) {
    if(strIsIntable(vtn))
        return std::stoi(vtn);
    else {
        std::string v = vtn.substr(0, vtn.find('/'));
        assert(strIsIntable(v));
        return std::stoi(v);
    }
}
}

bool TetmeshParser::parseObjFile(std::string objfilename, tetgenio *out) {
    std::ifstream infile(objfilename);
    std::string line;
    std::vector<REAL> vertCoords;
    std::vector<int> faceIdxs;
    while(std::getline(infile, line)) {
        line.erase(0, line.find_first_not_of(" \n\r\t"));
        if(line[0] == '#')
            continue;
        else if(line[0] == 'v') {
            if(line[1] == 'n' || line[1] == 't' || line[1] == 'p') {
                // texcors, normals, or param space all ignored
                continue;
            }
            // now we make a stream of floats representing the x,y,z[,w] and read from it
            std::istringstream strm(&line[1]);
            float x = 99, y = 99, z = 99;
            if(!(strm >> x >> y >> z)) {
                printf("Attempted to read line:\n%s\nAs string stream of x,y,z, but failed.\n", line.data());
                printf("Read: %f, %f, %f\n", x, y, z);
                continue;
            }
            vertCoords.push_back(x);
            vertCoords.push_back(y);
            vertCoords.push_back(z);
        }
        else if(line[0] == 'f') {
            // we make a stream of ints representing the triangle corners
            std::istringstream strm(&line[1]);
            std::string v1, v2, v3, tmp;
            int i1, i2, i3;
            if(!(strm >> v1 >> v2 >> v3)) {
                printf("Attempted to read line:\n%s\nAs string stream of v1,v2,v3, but failed.\n", line.data());
                continue;
            }
            if(strm >> tmp) {
                // > 3 verts
                printf("Line parsed as:\n%s\nHas >3 vertices listed. Ignoring addl verts.\n", line.data());
            }
            i1 = getFirstIntFromVTN(v1);
            i2 = getFirstIntFromVTN(v2);
            i3 = getFirstIntFromVTN(v3);
            // -1 because .obj indexes from 1
            faceIdxs.push_back(i1 - 1);
            faceIdxs.push_back(i2 - 1);
            faceIdxs.push_back(i3 - 1);
        }
    }
    // XXX The reason we are not directly initializing a tetgenio object is because there's a bunch of random stuff that has to be initialized.
    std::ofstream ofile("tmp.smesh");
    ofile << "# tmp.smesh autogenerated by convertObjFile(" << objfilename << ")" << std::endl;
    // number nodes, number dims (always 3), number attributes (currently 0), has boundary marker (no)
    ofile << vertCoords.size() / 3 << " " << 3 << " " << 0 << " " << 0 << std::endl;
    ofile << std::endl;
    for(unsigned long i = 0; i < vertCoords.size() / 3; i++) {
        ofile << i << " ";
        ofile << vertCoords[i * 3] << " ";
        ofile << vertCoords[i * 3 + 1] << " ";
        ofile << vertCoords[i * 3 + 2];
        ofile << std::endl;
    }
    ofile << std::endl;
    // number facets, has boundary marker (no)
    ofile << faceIdxs.size() / 3 << " " << 0 << std::endl;
    ofile << std::endl;
    for(unsigned long i = 0; i < faceIdxs.size() / 3; i++) {
        ofile << 3 << " ";
        ofile << faceIdxs[i * 3] << " ";
        ofile << faceIdxs[i * 3 + 1] << " ";
        ofile << faceIdxs[i * 3 + 2];
        ofile << std::endl;
    }
    ofile << std::endl;
    // number holes (0)
    ofile << 0 << std::endl;
    ofile.close();
    printf("About to tgio.load_poly...\n");
    fflush(stdout);
    out->load_poly("tmp");
    printf("Done with tgio.load_poly.\n");
    fflush(stdout);
    return true;
}

bool TetmeshParser::parseMeshFile(std::string meshFileName, tetgenio *out) {
    numTimesParsed++;
    printf("parsed %d times\n", numTimesParsed);
    fflush(stdout);
    std::ifstream in(meshFileName);
    std::string line;
    std::vector<float> vertCoords;
    std::vector<int> tetCoords;
    while(std::getline(in, line)) {
        if(line[0] == 'v') {
            std::istringstream strm(&line[1]);
            float x = 99, y = 99, z = 99;
            if(!(strm >> x >> y >> z)) {
                printf("Attempted to read line:\n%s\nAs string stream of x,y,z, but failed.\n", line.data());
                printf("Read: %f, %f, %f\n", x, y, z);
                continue;
            }
            vertCoords.push_back(x);
            vertCoords.push_back(y);
            vertCoords.push_back(z);
        }
        else if(line[0] == 't') {
            std::istringstream strm(&line[1]);
            int x = 99, y = 99, z = 99, w = 99;;
            if(!(strm >> x >> y >> z >> w)) {
                printf("Attempted to read line:\n%s\nAs string stream of x,y,z,w ints but failed.\n", line.data());
                printf("Read: %d, %d, %d, %d\n", x, y, z, w);
                continue;
            }
            tetCoords.push_back(x);
            tetCoords.push_back(y);
            tetCoords.push_back(z);
            tetCoords.push_back(w);
        }
    }
    std::ofstream ofile;
    ofile.open("tmp.ele", std::ios_base::trunc);
    assert(ofile);
    // first ele. Line is num tets, num verts/shape (4 for tet), 0 boundary
    ofile << tetCoords.size()/4 << " " << 4 << " " << 0;
    ofile << std::endl;
    for(unsigned long i = 0; i < tetCoords.size()/4; i++) {
        ofile << i << " ";
        ofile << tetCoords[i*4] << " ";
        ofile << tetCoords[i*4+1] << " ";
        ofile << tetCoords[i*4+2] << " ";
        ofile << tetCoords[i*4+3];
        ofile << std::endl;
    }
    ofile.close();
    std::ofstream onodes;
    onodes.open("tmp.node", std::ios_base::trunc);
    assert(onodes);
    // Line is num nodes, dimension, num attributes, 0 for boundary
    onodes << vertCoords.size()/3 << " " << 3 << " " << 0 << " " << 0;
    onodes << std::endl;
    for(unsigned long i = 0; i < vertCoords.size()/3; i++) {
        onodes << i << " ";
        onodes << vertCoords[i*3] << " ";
        onodes << vertCoords[i*3+1] << " ";
        onodes << vertCoords[i*3+2] << " ";
        onodes << std::endl;
    }
    onodes.close();
    printf("About to tgio.load_node...\n");
    fflush(stdout);
    out->load_node("tmp");
    printf("Done with tgio.load_node.\n");
    printf("About to tgio.load_tet...\n");
    out->load_tet("tmp");
    printf("Done with tgio.load_tet.\n");
    printf("SAVE EMEMEMME ME \n");
    fflush(stdout);
    return true;
}

bool TetmeshParser::parse(std::string filename, tetgenio *out) {
    assert(success);
    int ext_idx = filename.rfind('.');
    if(ext_idx == -1) {
        printf("Warning: file %s opened as TetMesh, but could not be read. Not loading.\n", filename.data());
        return false;
    }
    std::string ext = filename.substr(ext_idx);
    std::string noext = filename.substr(0, ext_idx);
    if(ext.compare(".obj") == 0) {
        // TODO: parse obj, create tetgenio, tetrahedralize
        tetgenio in;
        parseObjFile(filename, &in);
        printf("About to tetrahedralize...\n");
        fflush(stdout);
        double start = get_time();
        tetrahedralize((tetgenbehavior *)&tet_behavior, &in, out);
        out->save_elements("tmp");
        printf("Done tetrahedralizing. Took %f secs.\n", get_time() - start);
        fflush(stdout);
    }
    else if(ext.compare(".smesh") == 0) {
        // TODO: convert to .ele
        tetgenio in;
        in.load_poly((char *)noext.c_str());
        tetrahedralize((tetgenbehavior *)&tet_behavior, &in, out);
    }
    else if(ext.compare(".ele") == 0) {
        std::string nodefile = filename.substr(0, ext_idx) + ".node";
        printf("Assuming nodefile is %s.\n", nodefile.data());
        FILE *f = fopen(nodefile.c_str(), "r");
        if(!f) {
            printf("Assumption failed as %s does not exist.\n", nodefile.data());
            return false;
        }
        fclose(f);

        out->load_tet((char*)noext.c_str());
        int nodeext_idx = nodefile.rfind('.');
        if(nodeext_idx == -1) {
            printf("Warning: file %s opened as nodefile, but no extension found. Not loading.\n", nodefile.data());
            return false;
        }
        out->load_node((char*)nodefile.substr(0, nodeext_idx).c_str());
    }
    else if(ext.compare(".mesh") == 0) {
        parseMeshFile(filename, out);
    }
    else if(ext.compare(".node") == 0) {
        printf("Warning: file %s opened as TetMesh, but is a .node file (list of points). You might have meant to open the associated .poly (for 2D mesh) or .ele (for 3D tetmesh) file.\n", filename.data());
        return false;
    }
    else {
        printf("Warning: file %s opened as TetMesh, but could not be read. Not loading.\n", filename.data());
        return false;
    }
    fflush(stdout);
    return true;
}

